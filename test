// server.js

const express = require("express");
//const fetch = require("node-fetch");
const cors = require("cors");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

const OpenAI = require("openai");

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

const TCG_API_KEY = process.env.TCG_API_KEY;

// Helper to fetch cards from PokÃ©mon TCG API
async function getCardsUnderBudget(keyword, budget)
{
    const res = await fetch(`https://api.pokemontcg.io/v2/cards?q=name:${keyword}`, {
        headers: {
            "X-Api-Key": TCG_API_KEY
        }
    });
    const data = await res.json();

    return data.data.filter(card =>
    {
        const price = card?.tcgplayer?.prices?.normal?.market;
        return price && price <= budget;
    }).map(card => ({
        name: card.name,
        set: card.set.name,
        price: card.tcgplayer.prices.normal.market,
        url: card.tcgplayer.url
    })).slice(0, 3); // limit to top 3 results
}

// Route to handle user requests
app.post("/ask", async (req, res) =>
{
    const { prompt, budget } = req.body;

    const keyword = prompt.match(/\b(pikachu|charizard|mew|eevee|booster|pack)\b/i)?.[0] || "pokemon";
    const cards = await getCardsUnderBudget(keyword, budget);

    const suggestionsText = cards.map(c => `- ${c.name} (${c.set}) - $${c.price.toFixed(2)}`).join("\n");

    const chatPrompt = `The user wants help finding PokÃ©mon cards under $${budget}.

Their question: "${prompt}"

Here are cards available:
${suggestionsText}

Give 3 helpful, beginner-friendly tips and recommend 1-2 cards from the list.`;

    const completion = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
            { role: "system", content: "You are an expert in PokÃ©mon card collecting. Please give tips that relate to the question the beginner is asking" },
            { role: "user", content: chatPrompt }
        ],
        temperature: 0.7
    });

    res.json({
        reply: completion.choices[0].message.content,
        cards
    });
});

app.listen(3000, () => console.log("ðŸš€ Server running on http://localhost:3000"));